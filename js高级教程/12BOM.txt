S1 window 对象
p1. BOM的核心是window对象，表示浏览器的实例。window对象在浏览器中
有两重身份，一个是 #qs:(ECMAScript中的Global对象) #qs，另一个就是 #qs:(浏览器窗
口的JavaScript接口)#qs 。这意味着 #qs: (网页中定义的所有对象、变量和函数都以
window作为其Global对象，都可以访问其上定义的parseInt()等全局方
法。)#qs
通过#qs:(var)#qs声明的所有全局变量和函数都会变成window对象的属性和方法, 然而#qs:(使用let或const替代var)#qs则不会
比如：#qs1:()#qs

p2. top对象始终指向 #qs:(最上层窗口)#qs，即浏览器窗口本身。
而parent对象则#qs:(始终指向当前窗口的父窗口)#qs。如果当前窗口是最上层窗
口，则#qs:(parent等于top（都等于window）#qs。
还有一个self对象，它是#qs:(终极window属性)#qs，始终会指向#qs:(window)#qs。
这些属性都是window对象的属性

p3. window对象的位置可以通过不同的属性和方法来确定。现代浏览器提供
了qs:(screenLeft)#qs和 qs:(screenTop)#qs属性，用于表示窗口相对于屏幕左侧和顶部的
位置 ，返回值的单位是#qs: (CSS像素) #qs。
可以使用#qs:(moveTo())和#qs:(moveBy())#qs方法移动窗口。这两个方法都接收两个参
数，其中#qs:(moveTo())#qs接收要移动到的新位置的绝对坐标 和 ；而qs:(moveBy())#qs
则接收相对当前位置在两个方向上移动的像素数。

p4. CSS像素是Web开发中使用的统一像素单位。这个单位的背后其实是一
个角度：0.0213°。如果屏幕距离人眼是一臂长，则以这个角度计算的
CSS像素大小约为1/96英寸。这样定义像素大小是为了在不同设备上统
一标准。比如，低分辨率平板设备上12像素（CSS像素）的文字应该与
高清4K屏幕下12像素（CSS像素）的文字具有相同大小。这就带来了一
个问题，不同像素密度的屏幕下就会有不同的缩放系数，以便把物理像
素（屏幕实际的分辨率）转换为CSS像素（浏览器报告的虚拟分辨
率）。
举个例子，手机屏幕的物理分辨率可能是1920×1080，但因为其像素可
能非常小，所以浏览器就需要将其分辨率降为较低的逻辑分辨率，比如
640×320。这个物理像素与CSS像素之间的转换比率
由window.devicePixelRatio属性提供。对于分辨率从1920×1080转换为
640×320的设备，window.devicePixelRatio的值就是3。这样一来，12像
素（CSS像素）的文字实际上就会用36像素的物理像素来显示。
window.devicePixelRatio实际上与每英寸像素数（DPI，dots per inch）
是对应的。DPI表示单位像素密度，而window.devicePixelRatio表示物
理像素与逻辑像素之间的缩放系数。


p5. 在不同浏览器中确定浏览器窗口大小没有想象中那么容易。所有现代浏
览器都支持4个属性：#qs:(innerWidth、innerHeight、outerWidth和
outerHeight) #qs。outerWidth和outerHeight返回 #qs:(浏览器窗口自身的大小)#qs
（不管是在最外层window上使用，还是在窗格<frame>中使用）。innerWidth和innerHeight返回 #qs:(浏览器窗口中页面视口的大小（不
包含浏览器边框和工具栏）。)#qs
#qs:(document.documentElement.clientWidth和
document.documentElement.clientHeight)#qs 返回页面视口的宽度和高度。
浏览器窗口自身的精确尺寸不好确定，但可以确定页面视口的大小，

可以使用#qs:(resizeTo()和resizeBy())#qs 方法调整窗口大小。这两个方法都接
收两个参数，resizeTo()接收新的宽度和高度值，而resizeBy()接收宽
度和高度各要缩放多少。与移动窗口的方法一样，缩放窗口的方法可能会被浏览器禁用，而且在
某些浏览器中默认是禁用的。同样，缩放窗口的方法只能应用到 #qs:(最上层
的window对象。)#qs


p6. 浏览器窗口尺寸通常无法满足完整显示整个页面，为此用户可以通过滚
动在有限的视口中查看文档。度量文档相对于视口滚动距离的属性有两
对，返回相等的值：#qs: (window.pageXoffset/window.scrollX)#qs和 #qs:(
window.pageYoffset/window.scrollY)#qs
可以使用#qs:(scroll())#qs、qs:(scrollTo())#qs和#qs:(scrollBy())#qs方法滚动页面。这3个方法
都接收表示相对视口距离的 和 坐标，这两个参数在前两个方法中表示
要#qs:(滚动到的坐标)#qs，在最后一个方法中表示#qs:(滚动的距离)#qs。

这几个方法也都接收一个#qs:(ScrollToOptions)#qs字典，除了提供偏移值，还可
以通过#qs:(behavior)#qs 属性告诉浏览器是否平滑滚动。


p7. window.open()方法可以用于#qs:( 导航到指定URL )#qs，也可以用于#qs:( 打开新浏览 器窗口 )#qs。这个方法接收4个参数：#qs:( 要加载的URL )#qs、#qs:( 目标窗口 )#qs、#qs:( 特性字符 串 )#qs和#qs:( 表示新窗口在浏览器历史记录中是否替代当前加载页面的布尔值 )#qs。 通常，调用这个方法时只传 前3个参数，最后一个参数只有在#qs:( 不打开新 窗口时才会使用 )#qs。 如果#qs:( window.open()的第二个参数是一个已经存在的窗口或窗格 （frame）的名字 )#qs，则会在对应的窗口或窗格中打开URL。下面是一个 例子：#qs1:(   )#qs 


p8. 这些设置需要以#qs:( 逗号分隔的名值对 )#qs形式出现，特性字符串中#qs:( 不能包含空格 )#qs。打开一个可缩放的新窗口，大小为400像素×400像素， 位于离屏幕左边及顶边各10像素的位置。 #qs:( window.open("http://www.wrox.com/", "wroxWindow", "height=400,width=400,top=10,left=10,resizable=yes"); )#qs

p9. wroxWin.close(); 这个方法只能用于#qs:( window.open()创建的弹出窗口 )#qs。

p10. 虽然不可能不 经用户确认就关闭主窗口，但弹出窗口可以调用top.close()来关 闭自己。关闭窗口以后，窗口的引用还在不在#qs:( 在 )#qs，但只能用于检查 但只能用于检查 其#qs:( closed )#qs属性了

p11. 新创建窗口的window对象有一个属性#qs:( opener )#qs，指向#qs:( 打开它的窗口 )#qs。 这个属性只在弹出窗口的最上层window对象（top）有定义，是指 向调用window.open()打开它的窗口或窗格的指针。虽然新建窗口中有指向打开它的窗口的指针，但反之则不然。窗口 不会跟踪记录自己打开的新窗口，因此开发者需要自己记录。 
在某些浏览器中，每个标签页会运行在独立的进程中。如果一个标 签页打开了另一个，而window对象需要跟另一个标签页通信，那么 标签便不能运行在独立的进程中。在这些浏览器中，#qs:( 可以将新打开 的标签页的opener属性设置为null， )#qs表示新打开的标签页可以运行 在独立的进程中。

p12. 在浏览器扩展或其他程序屏蔽弹窗时，window.open()通常会抛出 错误。因此要准确检测弹窗是否被屏蔽，除了检测window.open() 的返回值，还要#qs:( 把它用try/catch包装起来 )#qs，

p13. JavaScript在浏览器中是单/双 #qs:( 单 )#qs线程执行的，但允许使用定时器指定在某个时 间之后或每隔一段时间就执行相应的代码。#qs:( setTimeout() )#qs用于指定在一 定时间后执行某些代码，而#qs:( setInterval( )#qs)用于指定每隔一段时间执行 某些代码。 setTimeout()方法通常接收两个参数：要执行的代码和在执行回调函数 前等待的时间（毫秒）。第一个参数可以是#qs:( 包含JavaScript代码的字符串 （类似于传给eval()的字符串） )#qs或者一个函数，

p14. JavaScript是单线程的，所以每次只能执行一段代码。为了调度不同代码 的执行，#qs:( JavaScript维护了一个任务队列。其中的任务会按照添加到队列 的先后顺序执行 )#qs。setTimeout()的第二个参数只是告诉JavaScript引擎在 指定的毫秒数过后把任务添加到这个队列。如果队列是空的，则会立即 执行该代码。如果队列不是空的，则代码必须等待前面的任务执行完才 能执行。 调用setTimeout()时，会返回一个#qs:( 表示该超时排期的数值ID。这个超时 ID是被排期执行代码的唯一标识符 )#qs，可用于#qs:( 取消该任务 )#qs。要取消等待中 的排期任务，可以调用#qs:( clearTimeout() )#qs方法并#qs:( 传入超时ID )#qs，

p15. 注意 所有超时执行的代码（函数）都会在#qs:( 全局作用域中的一个匿 名函数 )#qs中运行，因此函数中的this值在非严格模式下始终指 向#qs:( window )#qs，而在严格模式下是#qs:( undefined )#qs。如果给setTimeout()提供 了一个箭头函数，那么this会保留为#qs:( 定义它时所在的词汇 )#qs作用域。 setInterval()与setTimeout()的使用方法类似，只不过指定的任务会每 隔指定时间就执行一次，直到取消循环定时或者页面卸 载。setInterval()同样可以接收两个参数：要执行的代码（字符串或 函数），以及把下一次执行定时代码的任务添加到队列要等待的时间 （毫秒）。

p16. 下面是一个例子： setInterval(() => alert("Hello world!"), 10000); 注意 这里的关键点是，第二个参数，也就是间隔时间，指的是#qs:( 向 队列添加新任务之前等待的时间 )#qs。比如，调用setInterval()的时 间为01:00:00，间隔时间为3000毫秒。这意味着01:00:03时，浏览器 会#qs:( 把任务添加到执行队列 )#qs。浏览器不关心这个任务什么#qs:( 时候执行 )#qs或 者#qs:( 执行要花多长时间 )#qs。因此，到了01:00:06，它会再向队列中添加 一个任务。由此可看出，执行#qs:( 时间短、非阻塞的回调函数 )#qs比较适合setInterval()。 setInterval()方法也会返回一个循环定时ID，可以用于在未来某个时 间点上取消循环定时。要取消循环定时，可以调用clearInterval()并传 入定时ID。相对于setTimeout()而言，取消定时的能力对setInterval() 更加重要。毕竟，如果一直不管它，那么定时任务会一直执行到页面卸 载。 

p17. 使用#qs:( alert() )#qs、#qs:( confirm() )#qs和#qs:( prompt() )#qs方法，可以让浏览器调用系统对话 框向用户显示消息。它们的外观由操作系统或者#qs:( 浏览器决定 )#qs，可以/无法#qs:( 无法 )#qs使用CSS设 置。此外，这些对话框都是同步的模态对话框，即在它们显示的时候， 代码会#qs:( 停止执行 )#qs，在它们消失以后，代码才会恢复执行。 

p18. 单击了OK按钮还是Cancel按钮，可以通过confirm()方法的#qs:( 返回值 )#qs 判断：

p19. 最后一种对话框是提示框，通过调用prompt()方法来显示。提示框的用 途是提示用户输入消息。除了OK和Cancel按钮，提示框还会显示一个 文本框，让用户输入内容。prompt()方法接收两个参数：#qs:( 要显示给用户 的文本 )#qs，以及#qs:( 文本框的默认值 )#qs。如果用户单击了OK按钮，则prompt()#qs:( 会返回文本框中的值 )#qs。如果用户 单击了Cancel按钮，或者对话框被关闭，则prompt()会返回#qs:( null )#qs。

p20. JavaScript还可以显示另外两种对话框：#qs:( find() )#qs和#qs:( print() )#qs。这两种对话 框都是异步显示的，即控制权会#qs:( 立即返回给脚本 )#qs。用户在浏览器菜单上 选择#qs:( “查找”（find） )#qs和#qs:( “打印”（print） )#qs时显示的就是这两种对话框。通 过在#qs:( window对象 )#qs上调用#qs:( find() )#qs和#qs:( print() )#qs可以显示它们，

s2. Location

p21. location 是最 有用 的 BOM 对象 之一， 提供 了 #qs:( 当前 窗口 中 加载 文档 的 信息 )#qs， 以及 #qs:( 通常 的 导航 功能 )#qs。 这个 对象 独特 的 地方 在于， 它 既是#qs:( window 的 )#qs 属性， #qs:( 也是 document 的 )#qs 属性。 也就是说。 location 对象 不仅 保存 着 当前 #qs:( 加载 文档 )#qs 的 信息， 也 保存 着 #qs:( 把 URL 解析 为 离散 片段 后能 够 通过 属性 访问 )#qs 的 信息。
比如 location#qs:( .href )#qs "http://www.wrox.com:80/WileyCDA/? q=javascript#contents" 当前加载页面的完整URL。location的 toString()方法返回这个值
#qs:(location.protocol)#qs "http:" 页面使用的协议。通常 是"http:"或"https:"

p22. 虽然#qs:( location.search )#qs返 回了 从 问号 开始 直到 URL 末尾 的 所有 内容， 但没 有 办法 逐个 访问 每个 查询 参数。 解析 查询 字符串， 并 返回 一个 以 每个 查询 参数 为 属性 的 对象：#qs:1( a )#qs

p23. location 操纵地址 调用assign 的三种方法 #qs1:(location.assign("http://www.wrox.com");window.location = "http://www.wrox.com";location.href = "http://www.wrox.com"; ) #qs

p24. 修改location对象的属性也会修改当前加载的页面。其 中，#qs:( hash )#qs、#qs:( search )#qs、#qs:( hostname )#qs、#qs:( pathname )#qs和#qs:( port )#qs属性被设置为新值之后 都会修改当前URL，

p25. 最后一个修改地址的方法是#qs:( reload() )#qs，它能重新加载当前显示的页面。 #qs: (location.reload())#qs; // 重新加载，可能是从缓存加载
#qs:(location.reload(true))#qs; // 重新加载，从服务器加载





