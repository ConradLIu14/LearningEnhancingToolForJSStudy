/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./framework.js":
/*!**********************!*\
  !*** ./framework.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createElement\": () => (/* binding */ createElement),\n/* harmony export */   \"Component\": () => (/* binding */ Component),\n/* harmony export */   \"Underline\": () => (/* binding */ Underline),\n/* harmony export */   \"TextBox\": () => (/* binding */ TextBox),\n/* harmony export */   \"Answer\": () => (/* binding */ Answer),\n/* harmony export */   \"Button\": () => (/* binding */ Button)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction createElement(type, attributes) {\n  var element;\n  if (typeof type == 'string') element = new ElementWrapper(type);else element = new type();\n\n  for (var name in attributes) {\n    element.setAttribute(name, attributes[name]);\n  }\n\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n\n  for (var _i = 0, _children = children; _i < _children.length; _i++) {\n    var child = _children[_i];\n    if (typeof child === \"string\") child = new TextWrapper(child);\n    element.appendChild(child);\n  }\n\n  return element;\n}\nvar Component = /*#__PURE__*/function () {\n  function Component(type) {// this.root = this.render();\n\n    _classCallCheck(this, Component);\n  }\n\n  _createClass(Component, [{\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      this.attributes[name] = value;\n    }\n  }, {\n    key: \"appendChild\",\n    value: function appendChild(child) {\n      child.mountTo(this.root);\n    }\n  }, {\n    key: \"mountTo\",\n    value: function mountTo(parent) {\n      parent.appendChild(this.render());\n    }\n  }, {\n    key: \"add_id\",\n    value: function add_id() {\n      if (this.attributes.id && this.root) this.root.id = thsi.attributes.id;\n    }\n  }, {\n    key: \"add_classes\",\n    value: function add_classes() {\n      if (this.attributes[\"class\"]) {\n        var regExp = /\\S+/g;\n        var classes = this.attributes[\"class\"].match(regExp);\n\n        var _iterator = _createForOfIteratorHelper(classes),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n            this.root.classList.add(c);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    } // addListener(problemClass, question_class){\n    //     this.root.addEventListener('keyup', function(event){\n    //         if (event.keyCode === 18) {\n    //         }\n    //     })\n    // }\n\n  }]);\n\n  return Component;\n}();\n\nvar TextWrapper = /*#__PURE__*/function (_Component) {\n  _inherits(TextWrapper, _Component);\n\n  var _super = _createSuper(TextWrapper);\n\n  function TextWrapper(content) {\n    var _this;\n\n    _classCallCheck(this, TextWrapper);\n\n    _this = _super.call(this);\n    _this.root = document.createTextNode(content);\n    return _this;\n  }\n\n  return TextWrapper;\n}(Component);\n\nvar ElementWrapper = /*#__PURE__*/function (_Component2) {\n  _inherits(ElementWrapper, _Component2);\n\n  var _super2 = _createSuper(ElementWrapper);\n\n  function ElementWrapper(type) {\n    var _this2;\n\n    _classCallCheck(this, ElementWrapper);\n\n    _this2 = _super2.call(this);\n    _this2.root = document.createElement(type);\n    return _this2;\n  }\n\n  return ElementWrapper;\n}(Component);\n\nvar Underline = /*#__PURE__*/function (_Component3) {\n  _inherits(Underline, _Component3);\n\n  var _super3 = _createSuper(Underline);\n\n  function Underline() {\n    var _this3;\n\n    _classCallCheck(this, Underline);\n\n    _this3 = _super3.call(this);\n    _this3.attributes = Object.create(null);\n    _this3.attributes.ans = \" \";\n    return _this3;\n  }\n\n  _createClass(Underline, [{\n    key: \"render\",\n    value: function render() {\n      length = this.attributes.ans.length;\n      this.root = document.createElement(\"input\");\n      this.root.type = \"text\";\n      this.root.style.height = \"35px\";\n      this.root.style.backgroundColor = \"\";\n      this.root.style.fontSize = \"x-large\";\n      this.root.style.width = String(length * 30) + \"px\";\n      if (length * 20 >= 1000) this.root.style.width = \"1000px\";\n      if (this.attributes.id) this.root.id = this.attributes.id;\n      if (this.attributes[\"class\"]) this.root.className = this.attributes[\"class\"]; // let s = document.createElement(\"span\")\n      // s.appendChild(document.createTextNode(this.attributes.ans))\n      // s.style.display = \"none\" \n      // this.root.appendChild(s)\n\n      return this.root;\n    }\n  }]);\n\n  return Underline;\n}(Component);\nvar TextBox = /*#__PURE__*/function (_Component4) {\n  _inherits(TextBox, _Component4);\n\n  var _super4 = _createSuper(TextBox);\n\n  function TextBox() {\n    var _this4;\n\n    _classCallCheck(this, TextBox);\n\n    _this4 = _super4.call(this);\n    _this4.attributes = Object.create(null);\n    _this4.attributes.ans = \" \";\n    return _this4;\n  }\n\n  _createClass(TextBox, [{\n    key: \"render\",\n    value: function render() {\n      this.root = document.createElement(\"textarea\");\n      this.root.style.fontSize = \"x-large\";\n      this.root.rows = \"5\";\n      this.root.cols = \"70\";\n      if (this.attributes.id) this.root.id = this.attributes.id;\n      if (this.attributes[\"class\"]) this.root.className = this.attributes[\"class\"];\n      var s = document.createElement(\"span\");\n      return this.root;\n    }\n  }]);\n\n  return TextBox;\n}(Component);\nvar Answer = /*#__PURE__*/function (_Component5) {\n  _inherits(Answer, _Component5);\n\n  var _super5 = _createSuper(Answer);\n\n  // 必须传一个当前problem 的id进来；以及 answer进来\n  function Answer() {\n    var _this5;\n\n    _classCallCheck(this, Answer);\n\n    _this5 = _super5.call(this);\n    _this5.attributes = Object.create(null);\n    _this5.root = document.createElement(\"span\");\n    return _this5;\n  }\n\n  _createClass(Answer, [{\n    key: \"render\",\n    value: function render(ans) {\n      // if(ans) this.attributes.ans = ans\n      if (this.attributes.id) this.root.id = this.attributes.id;\n      if (this.attributes[\"class\"]) this.root.className = this.attributes[\"class\"];\n      this.root.appendChild(document.createTextNode(this.attributes.ans));\n      this.root.style.display = \"inline\";\n      this.root.style.backgroundColor = \"black\";\n      return this.root;\n    }\n  }]);\n\n  return Answer;\n}(Component); // export class Display_button extends Component {// parent and class\n//     constructor() {\n//         super()\n//         this.attributes = new Object(null)\n//         this.root = document.createElement(\"button\")\n//     }\n//     render() {\n//         this.root.appendChild(document.createTextNode(\"Answer\"))// parent and class\n//         if (this.attributes.class) this.root.className = this.attributes.class\n//         if (this.attributes.id) this.root.id = this.attributes.id\n//         // this.root.onclick = function () {\n//         //     // console.log(this.attributes)// 在 onclick 里面，找不到this 了\n//         //     let parent = this.parentNode\n//         //     let spans = parent.getElementsByTagName(\"span\")\n//         //     for (let s of spans) {\n//         //         if (s.className === this.className) {\n//         //             if (s.style.backgroundColor === \"pink\") s.style.backgroundColor = \"black\"\n//         //             else if (s.style.backgroundColor === \"black\") s.style.backgroundColor = \"pink\"\n//         //         }\n//         //     }\n//         // }\n//         this.root.onclick = new onclikcs().display_ans\n//         return this.root\n//     }\n// }\n\nvar Button = /*#__PURE__*/function (_Component6) {\n  _inherits(Button, _Component6);\n\n  var _super6 = _createSuper(Button);\n\n  function Button() {\n    var _this6;\n\n    _classCallCheck(this, Button);\n\n    _this6 = _super6.call(this);\n    _this6.attributes = new Object(null);\n    _this6.root = document.createElement(\"button\");\n    _this6.onclick = null;\n    _this6.text = \"button\";\n    return _this6;\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var onclick = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      this.root.appendChild(document.createTextNode(this.text)); // parent and class\n\n      if (this.attributes[\"class\"]) this.root.className = this.attributes[\"class\"];\n      if (this.attributes.id) this.root.id = this.attributes.id;\n      if (onclick) this.root.onclick = onclick;else if (this.onclick) this.root.onclick = this.onclick;\n      return this.root;\n    }\n  }]);\n\n  return Button;\n}(Component);\n\n//# sourceURL=webpack://npmbasis/./framework.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _problems_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./problems.js */ \"./problems.js\");\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\n/* harmony import */ var _paper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./paper.js */ \"./paper.js\");\n/* harmony import */ var _winterjs_1js_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./winterjs/1js类型.js */ \"./winterjs/1js类型.js\");\n // import { Problem } from \"./problemss.js\"\n\n\n\n\nvar p1 = (0,_framework_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_paper_js__WEBPACK_IMPORTED_MODULE_2__.Paper, {\n  \"class\": \"paper1\"\n});\nvar p2 = (0,_framework_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_paper_js__WEBPACK_IMPORTED_MODULE_2__.Paper, {\n  problems: _winterjs_1js_js__WEBPACK_IMPORTED_MODULE_3__.problems,\n  \"class\": \"paper2\"\n});\np1.mountTo(document.body);\np2.mountTo(document.body);\n\n//# sourceURL=webpack://npmbasis/./main.js?");

/***/ }),

/***/ "./paper.js":
/*!******************!*\
  !*** ./paper.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Paper\": () => (/* binding */ Paper)\n/* harmony export */ });\n/* harmony import */ var _problems_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./problems.js */ \"./problems.js\");\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n\n\nvar Paper = /*#__PURE__*/function (_Component) {\n  _inherits(Paper, _Component);\n\n  var _super = _createSuper(Paper);\n\n  // 开头必须大写 \n  function Paper() {\n    var _this;\n\n    _classCallCheck(this, Paper);\n\n    _this = _super.call(this);\n    _this.attributes = Object.create(null); // 必须有 this.attributes.problems 才可以生成，单独生成一个\n\n    _this.activated_problems = null; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n    _this.problems_handler = new _problems_js__WEBPACK_IMPORTED_MODULE_0__.Onclicks();\n    _this.root = document.createElement('div');\n    _this.problems = [];\n    return _this;\n  }\n\n  _createClass(Paper, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.problem_num = 0;\n      if (this.attributes.problems) this.problem_num = this.attributes.problems.length;\n      this.root.style.width = \"1400px\";\n      this.root.style.border = \"1px solid black\";\n      this.root.style.margin = \"0 auto\"; // 居中\n\n      this.root.tabIndex = \"-1\";\n      var problem_index = 0;\n      var question_index = 0;\n      var problems = this.problems;\n      var dispaly_all = document.createElement(\"button\");\n      dispaly_all.appendChild(document.createTextNode(\"display all\"));\n\n      dispaly_all.onclick = function (e) {\n        problem_index = 0;\n        question_index = 0;\n\n        _this2.show_all_answers();\n      };\n\n      this.root.appendChild(dispaly_all);\n      var Hide_all = document.createElement(\"button\");\n      Hide_all.appendChild(document.createTextNode(\"hide all\"));\n\n      Hide_all.onclick = function (e) {\n        problem_index = 0;\n        question_index = 0;\n\n        _this2.hide_all_answers();\n      };\n\n      this.root.appendChild(Hide_all);\n\n      if (this.attributes.problems === undefined) {\n        // 如果没有problem 就返回一个空的 \n        this.root.style.height = \"100px\";\n        return this.root;\n      } else {\n        var _problem_index;\n\n        var p;\n        var content;\n        var question_array;\n        var answer_array = [];\n        var curr;\n        if (this.attributes[\"class\"]) this.root.className = this.attributes[\"class\"];\n        if (this.attributes.id) this.root.id = this.attributes.id;\n\n        var _iterator = _createForOfIteratorHelper(this.attributes.problems),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var i = _step.value;\n            _problem_index = i[0].problem_index;\n            content = i[1].content;\n            question_array = [];\n            answer_array = [];\n\n            for (var ii = 0; ii < content.length; ii++) {\n              curr = content[ii];\n\n              if (curr.type === \"string\") {\n                question_array.push(curr.string);\n              } else if (curr.type === \"question\") {\n                question_array.push(\"#qs\");\n                answer_array.push({\n                  type: curr.question.type,\n                  ans: curr.question.answer\n                });\n              } else continue;\n            }\n\n            p = (0,_framework_js__WEBPACK_IMPORTED_MODULE_1__.createElement)(_problems_js__WEBPACK_IMPORTED_MODULE_0__.Problem, {\n              ques: question_array,\n              ans: answer_array,\n              \"class\": _problem_index\n            }); // class 可以这么写 // class = {\"paper1-problem-\" + problem_index}\n\n            p.mountTo(this.root);\n            this.problems.push(p);\n            console.log(_problem_index, question_array, answer_array);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } // ----------------------------------- 这里应该变成一个类似 animation 之类可开关的动作, 可以通过一个按钮或者什么东西开启或者停止这个监听----------------------------------------------------\n      // let problem_index = 0; let question_index = 0; let problems = this.problems\n\n\n      this.root.addEventListener(\"keyup\", function (event) {\n        //--------------------------------------------------------------------------------------------------\n        if (event.key === \"Enter\" && event.altKey) show_next_answer(event);\n      });\n      var current_show = null;\n\n      var show_next_answer = function show_next_answer(event) {\n        var curr_problem = problems[problem_index];\n\n        if (question_index < curr_problem.attributes.ans.length) {\n          var s = curr_problem.root.getElementsByTagName('span')[question_index];\n          s.style.backgroundColor = \"pink\";\n        }\n\n        question_index += 1;\n\n        if (question_index >= problems[problem_index].attributes.ans.length) {\n          question_index = 0;\n          problem_index = (problem_index + 1) % problems.length;\n        } // 自动跳转到下一个问题\n\n\n        if (question_index < problems[problem_index].questions.length) {\n          var q = problems[problem_index].questions[question_index];\n          q.root.focus();\n        }\n      }; // -----------------------------------------------------------------------------------------------------------------------------------------\n\n\n      return this.root;\n    }\n  }, {\n    key: \"show_all_answers\",\n    value: function show_all_answers() {\n      var _iterator2 = _createForOfIteratorHelper(this.problems),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var p = _step2.value;\n          this.problems_handler.display_allans(p.root);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"hide_all_answers\",\n    value: function hide_all_answers() {\n      var _iterator3 = _createForOfIteratorHelper(this.problems),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var p = _step3.value;\n          this.problems_handler.hide_allans(p.root);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }]);\n\n  return Paper;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_1__.Component);\n\n//# sourceURL=webpack://npmbasis/./paper.js?");

/***/ }),

/***/ "./problems.js":
/*!*********************!*\
  !*** ./problems.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Problem\": () => (/* binding */ Problem),\n/* harmony export */   \"Problem_handler\": () => (/* binding */ Problem_handler),\n/* harmony export */   \"Onclicks\": () => (/* binding */ Onclicks)\n/* harmony export */ });\n/* harmony import */ var _framework_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./framework.js */ \"./framework.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// import { electron } from \"webpack\";\n\nvar QUESTIONS = Symbol(\"questions\");\nvar Problem = /*#__PURE__*/function (_Component) {\n  _inherits(Problem, _Component);\n\n  var _super = _createSuper(Problem);\n\n  // ques={question_array} ans={answer_array} this two is very important ques is inevitable\n  function Problem() {\n    var _this;\n\n    _classCallCheck(this, Problem);\n\n    _this = _super.call(this);\n    _this.attributes = Object.create(null);\n    _this.attributes.ans = [];\n    _this.attributes.ques = [];\n    _this.questions = [];\n    _this.handler = new Problem_handler();\n    return _this;\n  }\n\n  _createClass(Problem, [{\n    key: \"render\",\n    value: function render() {\n      this.root = document.createElement(\"div\"); // if (this.attributes.id) this.root.id = this.attributes.id\n      // if (this.attributes.class) this.root.className = this.attributes.class\n\n      if (this.attributes.id) {\n        this.add_id();\n      }\n\n      if (this.attributes[\"class\"]) {\n        this.root.className = this.attributes[\"class\"];\n        this.add_classes();\n      } else this.root.className = \"paper\";\n\n      this.root.style.fontSize = \"x-large\";\n      this.root.style.border = \"1px solid blue\"; // 边框颜色\n\n      this.root.style.width = \"1400px\";\n      this.root.style.margin = \"0 auto\";\n      var problem_index = 0;\n      var curr_count;\n      var a;\n      var u;\n      this.root.appendChild(document.createTextNode(\"\"));\n      var reset_but = document.createElement(\"reset\");\n      var dispaly_ans_but = document.createElement(\"button\"); // let questions = []\n      // let qs_count = 0\n\n      reset_but.appendChild(document.createTextNode(\"Reset\"));\n      dispaly_ans_but.appendChild(document.createTextNode(\"Answer\"));\n      var count = 0;\n\n      var _iterator = _createForOfIteratorHelper(this.attributes.ques),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var que = _step.value;\n          count += 1;\n\n          if (que === \"#qs\") {\n            curr_count = String(problem_index);\n\n            if (problem_index > this.attributes.ans.length) {\n              a = 0;\n              alert(\"wrong question\");\n            } else a = this.attributes.ans[problem_index].ans; // console.log(a,a.length,a.type)\n\n\n            if (this.attributes.ans[problem_index].type === \"UnderLine\") u = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Underline, {\n              \"class\": this.root.className + \" ans_type \" + String(problem_index),\n              ans: a\n            });else if (this.attributes.ans[problem_index].type === \"TextBox\") u = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_framework_js__WEBPACK_IMPORTED_MODULE_0__.TextBox, {\n              \"class\": this.root.className + \" ans_type \" + String(problem_index),\n              ans: a\n            });else u = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Underline, {\n              \"class\": this.root.className + \" ans_type \" + String(problem_index),\n              ans: a\n            });\n            this.questions.push(u);\n            if (a.type === \"TextBox\") this.root.appendChild(document.createElement(\"br\"));\n            u.mountTo(this.root);\n            var s = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Answer, {\n              \"class\": this.root.className + \" ans ans\" + String(count - 1),\n              ans: this.attributes.ans[problem_index].ans\n            });\n            s.mountTo(this.root);\n            var butt = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(Display_button, {\n              \"class\": this.root.className + \" butt butt\" + String(count - 1),\n              parent: this.root\n            });\n            butt.mountTo(this.root);\n            problem_index += 1;\n          } else this.root.appendChild(document.createTextNode(que));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.root.appendChild(document.createElement(\"br\"));\n      var show_all_button = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(Show_all_button, null);\n      show_all_button.mountTo(this.root);\n      var hide_all_button = (0,_framework_js__WEBPACK_IMPORTED_MODULE_0__.createElement)(Hide_all_button, null);\n      hide_all_button.mountTo(this.root);\n      return this.root;\n    }\n  }, {\n    key: \"mountTo\",\n    value: function mountTo(parent) {\n      parent.appendChild(this.render());\n    } // showall(){\n    //     this.handler.showall(this.root)\n    // }\n\n  }]);\n\n  return Problem;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Component);\nvar Problem_handler = /*#__PURE__*/function () {\n  function Problem_handler() {\n    _classCallCheck(this, Problem_handler);\n  }\n\n  _createClass(Problem_handler, [{\n    key: \"showall\",\n    value: function showall(element) {\n      var spans = element.getElementsByTagName(\"span\");\n\n      var _iterator2 = _createForOfIteratorHelper(spans),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var s = _step2.value;\n          if (s.style.backgroundColor === \"black\") s.style.backgroundColor = \"pink\";\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }]);\n\n  return Problem_handler;\n}(); // ...................................... button and onclick .....................................................................\n\nvar Onclicks = /*#__PURE__*/function () {\n  function Onclicks() {\n    _classCallCheck(this, Onclicks);\n  }\n\n  _createClass(Onclicks, [{\n    key: \"display_ans\",\n    value: // in problem blocks； just for questions in one problem\n    function display_ans(element, className) {\n      // let parent = this.parentNode\n      var spans = element.getElementsByTagName(\"span\");\n      var regExp = /ans[0-9]+/g;\n\n      var _iterator3 = _createForOfIteratorHelper(spans),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var s = _step3.value;\n          var ClassNumber = s.className.match(regExp)[0];\n          ClassNumber = ClassNumber[(3, ClassNumber.length - 1)];\n\n          if (ClassNumber === className) {\n            if (s.style.backgroundColor === \"pink\") s.style.backgroundColor = \"black\";else if (s.style.backgroundColor === \"black\") s.style.backgroundColor = \"pink\";\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"display_allans\",\n    value: function display_allans(element) {\n      // let parent = this.parentNode\n      // if(typeof e == \"event\") parent \n      // console.log(typeof e)\n      var spans = element.getElementsByTagName(\"span\");\n\n      var _iterator4 = _createForOfIteratorHelper(spans),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var s = _step4.value;\n          if (s.style.backgroundColor === \"black\") s.style.backgroundColor = \"pink\";\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"hide_allans\",\n    value: function hide_allans(element) {\n      // let parent = this.parentNode\n      var spans = element.getElementsByTagName(\"span\");\n\n      var _iterator5 = _createForOfIteratorHelper(spans),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var s = _step5.value;\n          if (s.style.backgroundColor === \"pink\") s.style.backgroundColor = \"black\";\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  }]);\n\n  return Onclicks;\n}();\n\nvar Display_button = /*#__PURE__*/function (_Button) {\n  _inherits(Display_button, _Button);\n\n  var _super2 = _createSuper(Display_button);\n\n  function Display_button() {\n    var _this2;\n\n    _classCallCheck(this, Display_button);\n\n    _this2 = _super2.call(this);\n\n    _this2.onclick = function () {\n      var parent = _this2.root.parentNode;\n      var regExp = /butt[0-9]+/g;\n\n      var ClassNumber = _this2.root.className.match(regExp)[0];\n\n      ClassNumber = ClassNumber[(4, ClassNumber.length - 1)];\n      new Onclicks().display_ans(parent, ClassNumber);\n    };\n\n    _this2.text = \"Show/Hide\";\n    return _this2;\n  }\n\n  return Display_button;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Button);\n\nvar Show_all_button = /*#__PURE__*/function (_Button2) {\n  _inherits(Show_all_button, _Button2);\n\n  var _super3 = _createSuper(Show_all_button);\n\n  function Show_all_button() {\n    var _this3;\n\n    _classCallCheck(this, Show_all_button);\n\n    _this3 = _super3.call(this);\n\n    _this3.onclick = function (e) {\n      var parent = _this3.root.parentNode;\n      new Onclicks().display_allans(parent);\n    };\n\n    _this3.text = \"Display All\";\n    return _this3;\n  }\n\n  return Show_all_button;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Button);\n\nvar Hide_all_button = /*#__PURE__*/function (_Button3) {\n  _inherits(Hide_all_button, _Button3);\n\n  var _super4 = _createSuper(Hide_all_button);\n\n  function Hide_all_button() {\n    var _this4;\n\n    _classCallCheck(this, Hide_all_button);\n\n    _this4 = _super4.call(this);\n\n    _this4.onclick = function (e) {\n      var parent = _this4.root.parentNode;\n      new Onclicks().hide_allans(parent);\n    };\n\n    _this4.text = \"Hide All\";\n    return _this4;\n  }\n\n  return Hide_all_button;\n}(_framework_js__WEBPACK_IMPORTED_MODULE_0__.Button); // ...................................... button and onclick 上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上上\n\n//# sourceURL=webpack://npmbasis/./problems.js?");

/***/ }),

/***/ "./winterjs/1js类型.js":
/*!***************************!*\
  !*** ./winterjs/1js类型.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"problems\": () => (/* binding */ problems)\n/* harmony export */ });\n// import {Problem} from \"./problems\"\n\nvar problems = [[{\n  \"problem_index\": \"p1\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p1.JavaScript 语言的每一个值都属于某一种数据类型。JavaScript 语言规定了 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (7)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 种语言类型。\"\n  }]\n}], [{\n  \"problem_index\": \"p2\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p2. 这 7 种语言类型是: \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" Undefined; Null； Boolean； String； Number； Symbol；Object \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p3\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p3. 为什么有的编程规范要求用 void 0 代替 undefined？ \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(因为 JavaScript 的代码 undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。)\",\n      \"type\": \"TextBox\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 现在我们就分别来看一下。)\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" 使用 var 或 let 声明 了 变量 但没 有 初始化 时 \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"， 就 相当于 给 变量 赋予 了 undefined 值：\"\n  }]\n}], [{\n  \"problem_index\": \"p4\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p4. Undefined 跟 Null 有一定的表意差别，   Undefined 表示的是：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(没有定义)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"   Null 表示的是：  \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(空值,定义了但是为空)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"  \"\n  }]\n}], [{\n  \"problem_index\": \"p5\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p5. js 在这(Undefined 跟 Null )方面的设计失误是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(JavaScript 的代码 undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，)\",\n      \"type\": \"TextBox\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p6\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p6. 我们为了避免无意中被篡改，我建议使用 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (void 0) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 来获取 undefined 值。 \"\n  }]\n}], [{\n  \"problem_index\": \"p7\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p7. 所以在任何代码中，你都可以放心用 null 关键字来获取 null 值, 因为 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" null 是 JavaScript 关键字 \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p8\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p8. Boolean 很简单，写一写吧：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Boolean 类型有两个值， true 和 false，它用于表示逻辑意义上的真和假，同样有关键字 true 和 false 来表示两个值。这个类型很简单，我就不做过多介绍了。) \",\n      \"type\": \"TextBox\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p9\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p9. String 用于表示 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(文本数据)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \", String 有最大长度是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(2^53 - 1)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，这在一般开发中都是够用的\"\n  }]\n}], [{\n  \"problem_index\": \"p10\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p10. 因为 String 的意义并非“字符串”，而是\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(字符串的 UTF16 编码)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，我们字符串的操作 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(charAt、charCodeAt、length)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 等方法针对的都是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(UTF16 编码)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。所以，字符串的最大长度，实际上是\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(受字符串的编码长度影响的)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。\"\n  }]\n}], [{\n  \"problem_index\": \"p11\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p11. JavaScript 中的字符串是(可以 or 无法） \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(无法)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 变更的，一旦字符串构造出来，\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(值)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"类型的特征。\"\n  }]\n}], [{\n  \"problem_index\": \"p12\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p12. JavaScript 字符串把\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(每个 UTF16 单元)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"当作一个字符来处理，所以处理非 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(BMP（超出 U+0000 - U+FFFF 范围）)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"的字符时，\"\n  }]\n}], [{\n  \"problem_index\": \"p13\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p13. 你应该格外小心。JavaScript 这个设计继承自 Java，最新标准中是这样解释的，这样设计是为了 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (“性能和尽可能实现起来简单”。因为现实中很少用到 BMP 之外的字符。)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p14\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p14. JavaScript 中的 Number 类型有 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(18437736874454810627(即 2^64-2^53+3))\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 个值。JavaScript 中的 Number 类型基本符合 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(IEEE 754-2008 规定的双精度浮点数)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：(三个)\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字；Infinity，无穷大；-Infinity，负无穷大。)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p15\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p15. 另外，值得注意的是，JavaScript 中0有 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(+0 和 -0)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，在加法类运算中它们没有区别，但是除法的场合则需要特别留意区分，而区分 0 的方式，正是检测 1/x \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(是 Infinity 还是 -Infinity)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。\"\n  }]\n}], [{\n  \"problem_index\": \"p16\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p16. 根据双精度浮点数的定义，Number 类型中有效的整数范围是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(-0x1fffffffffffff 至 0x1fffffffffffff)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，所以 Number 无法精确表示此范围外的整数。同样根据浮点数的定义，非整数的 Number 类型(可以 or 无法)\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" 不可以 \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 用 ==（===） 来比较. console.log( 0.1 + 0.2 == 0.3);输出是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(false)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"小数比较方式是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"使用 JavaScript 提供的最小精度值\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 代码是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(console.log( Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON); ) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p17\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p17. Symbol 是 ES6 中引入的新类型，它是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (一切非字符串的对象 key 的集合)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，在 ES6 规范中，整个对象系统被用 Symbol 重塑。\"\n  }]\n}], [{\n  \"problem_index\": \"p18\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p18. 我们创建 Symbol 的方式是使用全局的 Symbol 函数。例如：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (var mySymbol = Symbol(\\\"my symbol\\\");) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p19\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p19. 全局的 Symbol 函数的属性。例如我们可以使用\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"var o = new Object；o[Symbol.iterator] = function() {var v = 0；return {next: function() {return { value: v++, done: v > 10 }；}}        };for(var v of o) console.log(v); // 0 1 2 3 ... 9 \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p20\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p20. 在 JavaScript 中，对象的定义是\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(“属性的集合”)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。属性分为\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(数据属性) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"和\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(访问器属性)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，二者都是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"( key-value )\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"结构，key \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(可以是字符串)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"或者 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Symbol 类型)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。\"\n  }]\n}], [{\n  \"problem_index\": \"p21\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p21. 提到对象，我们必须要提到一个概念：类。因为 C++ 和 Java 的成功，在这两门语言中，每个类都是一个类型，二者几乎等同，以至于很多人常常会把 JavaScript 的“类”与类型混淆。事实上，JavaScript 中的“类”仅仅是\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(运行时对象的一个私有属性)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，而 JavaScript 中是无法\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(自定义类型的)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。\"\n  }]\n}], [{\n  \"problem_index\": \"p22\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p22. JavaScript 中的几个基本类型(数字，字符串\\\"\\\",true or false; {})，都在对象类型中有一个“亲戚”。它们是：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Number；String；Boolean；Symbol。) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p23\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p23. 所以，我们必须认识到 3 与 new Number(3) 是完全(相同 or 不同) \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(不同)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"的值，它们一个是 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Number)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 类型， 一个是\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(对象)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"类型。\"\n  }]\n}], [{\n  \"problem_index\": \"p24\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p24. Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(它们产生对象)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，当直接调用时，它们表示\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(强制类型转换)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"。\"\n  }]\n}], [{\n  \"problem_index\": \"p25\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p25. Symbol 函数比较特殊，直接用 new 调用它会\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(抛出错误)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，但它仍然是 Symbol 对象的构造器。\"\n  }]\n}], [{\n  \"problem_index\": \"p26\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p26. JavaScript 语言设计上试图模糊对象和基本类型之间的关系，我们日常代码可以把对象的方法在基本类型上使用，比如(代码)：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(console.log(\\\"abc\\\".charAt(0)); //a) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p27\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p27. 甚至我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 Symbol 原型上添加了 hello 方法，在任何 Symbol 类型变量都可以调用。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Symbol.prototype.hello = () => console.log(\\\"hello\\\");var a = Symbol(\\\"a\\\");console.log(typeof a); //symbol，a并非对象a.hello(); //hello，有效)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p28\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p28. 因为 JS 是弱类型语言，所以类型转换发生非常频繁，大部分我们熟悉的运算都会先进行类型转换。大部分类型转换符合人类的直觉，但是如果我们不去理解类型转换的严格定义，很容易造成一些代码中的判断失误。其中最为臭名昭著的是 JavaScript 中的“ == ”运算，因为试图实现跨类型的比较，它的规则复杂到几乎没人可以记住。这里我们当然也不打算讲解 == 的规则，它属于设计失误，并非语言中有价值的部分，很多实践中推荐禁止使用“ ==”，而要求程序员进行显式地类型转换后，用 === 比较。较为复杂的部分是 Number 和 String 之间的转换，以及对象跟基本类型之间的转换。我们分别来看一看这几种转换的规则。\"\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p29\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p29. 字符串到数字的类型转换，存在一个语法结构，类型转换支持(进制) \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(十进制、二进制、八进制和十六进制)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 比如 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(30；0b111；0o13；0xFF。) \",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p30\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p30. 此外，JavaScript 支持的字符串语法还包括正负号科学计数法，可以使用\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (E or e)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 来表示例如\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(1e3；-1e-2。)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p31\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p31. 需要注意的是，parseInt 和 parseFloat 并不使用这个转换，所以支持的语法跟这里不尽相同。在不传入第二个参数的情况下，\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(parseInt 只支持 16 进制前缀“0x”，而且会忽略非数字字符)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，也不支持\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(科学计数法。)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p32\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p32. 在较小的范围内，数字到字符串的转换是完全符合你直觉的十进制表示。当 Number 绝对值较大或者较小时，字符串表示则是使用科学计数法表示的。这个算法细节繁多，我们从感性的角度认识，它其实就是保证了产生的字符串不会过长。具体的算法，你可以去参考 JavaScript 的语言标准。由于这个部分内容，我觉得在日常开发中很少用到，所以这里我就不去详细地讲解了。\"\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p33\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p33. 每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \" (基本类型转换为对应的对象，)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"它是类型转换中一种相当重要的种类\"\n  }]\n}], [{\n  \"problem_index\": \"p34\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p34. 前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可以利用一个函数的 call 方法来强迫产生装箱。\"\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p35\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p35. 装箱转换是：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(我们定义一个函数，函数里面只有 return this，然后我们调用函数的 call 方法到一个 Symbol 类型的值上，这样就会产生一个 symbolObject。我们可以用 console.log 看一下这个东西的 type of，它的值是 object，我们使用 symbolObject instanceof 可以看到，它是 Symbol 这个类的实例，我们找它的 constructor 也是等于 Symbol 的，所以我们无论从哪个角度看，它都是 Symbol 装箱过的对象：)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"代码：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(var symbolObject = (function(){ return this; }).call(Symbol(\\\"a\\\"));console.log(typeof symbolObject); //objectconsole.log(symbolObject instanceof Symbol); //trueconsole.log(symbolObject.constructor == Symbol); //true)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"每一类装箱对象皆有私有的 Class 属性，这些属性可以用 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(var symbolObject = Object(Symbol(\\\"a\\\"));console.log(Object.prototype.toString.call(symbolObject)); //[object Symbol])\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p36\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p36. 在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此 Object.prototype.toString 是可以准确识别对象对应的基本类型的方法，它比 instanceof 更加准确。但需要注意的是，call 本身会产生装箱操作，所以需要配合 typeof 来区分基本类型还是对象类型。\"\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p37\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p37. 在 JavaScript 标准中，规定了 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(ToPrimitive)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 函数，它是对象类型到基本类型的转换（即，拆箱转换）。\"\n  }]\n}], [{\n  \"problem_index\": \"p38\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p38. 对象到 String 和 Number 的转换都遵循\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(“先拆箱再转换”)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"的规则。通过拆箱转换，先把对象变成\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(基本类型)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"，再从其转换为对应的 String 或者 Number。\"\n  }]\n}], [{\n  \"problem_index\": \"p39\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p39. 拆箱转换会尝试调用 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(valueOf)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 和 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(var o = {valueOf : () => {console.log(\\\"valueOf\\\"); return {}},toString : () => {console.log(\\\"toString\\\"); return {}}}o * 2// valueOf// toString// TypeError)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"代码说明：\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"代码说明：\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"：(我们定义了一个对象 o，o 有 valueOf 和 toString 两个方法，这两个方法都返回一个对象，然后我们进行 o*2 这个运算的时候，你会看见先执行了 valueOf，接下来是 toString，最后抛出了一个 TypeError，这就说明了这个拆箱转换失败了。)\"\n  }]\n}], [{\n  \"problem_index\": \"p40\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p40. 到 String 的拆箱转换会优先调用 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(var o = {valueOf : () => {console.log(\\\"valueOf\\\"); return {}},toString : () => {console.log(\\\"toString\\\"); return {}}}String(o)// toString// valueOf// TypeError)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p41\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p41. 在 ES6 之后，还允许对象通过显式指定 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(@@toPrimitive Symbol)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 来覆盖原有的行为。 代码\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(var o = {valueOf : () => {console.log(\\\"valueOf\\\"); return {}},toString : () => {console.log(\\\"toString\\\"); return {}}}o[Symbol.toPrimitive] = () => {console.log(\\\"toPrimitive\\\"); return \\\"hello\\\"}console.log(o + \\\"\\\")// toPrimitive// hello)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}], [{\n  \"problem_index\": \"p42\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p42. 除了这七种语言类型，还有一些语言的实现者更关心的规范类型。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(List 和 Record)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"： 用于描述函数传参过程。Set：主要用于解释字符集等。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Completion Record)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"：用于描述异常、跳出等语句执行过程。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Reference)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"：用于描述对象属性访问、delete 等。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Property Descriptor)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"：用于描述对象的属性。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Lexical Environment)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \" 和 \"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Environment Record)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"：用于描述变量和作用域。\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"(Data Block)\",\n      \"type\": \"UnderLine\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"：用于描述二进制数据。\"\n  }]\n}], [{\n  \"problem_index\": \"p43\"\n}, {\n  \"content\": [{\n    \"type\": \"string\",\n    \"string\": \"p43. 最后我们留一个实践问题，如果我们不用原生的 Number 和 parseInt，用 JavaScript 代码实现 String 到 Number 的转换，该怎么做呢？\"\n  }, {\n    \"type\": \"question\",\n    \"question\": {\n      \"answer\": \"()\",\n      \"type\": \"TextBox\"\n    }\n  }, {\n    \"type\": \"string\",\n    \"string\": \"\"\n  }]\n}]];\n\n//# sourceURL=webpack://npmbasis/./winterjs/1js%E7%B1%BB%E5%9E%8B.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./main.js");
/******/ 	
/******/ })()
;