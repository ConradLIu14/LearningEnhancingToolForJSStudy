p1.JavaScript 语言的每一个值都属于某一种数据类型。JavaScript 语言规定了 #qs: (7)#qs 种语言类型。
   p2. 这 7 种语言类型是: #qs: Undefined; Null； Boolean； String； Number； Symbol；Object #qs

s1 Undefined、Null
p3. 为什么有的编程规范要求用 void 0 代替 undefined？ #qs1:(因为 JavaScript 的代码 undefined 
是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，所以，我们为了避免无意中被篡改，我建议使用 void 0 来获取 undefined 值。)#qs 现在我们就分别
来看一下。)#qs
Undefined 类型 只有 一个 值， 就是 特殊 值 undefined。 当 #qs: 使用 var 或 let 声明 了 变量 但没 有 初始化 时 #qs， 就 相当于 给 变量 赋予 了 undefined 值：


p4. Undefined 跟 Null 有一定的表意差别，   Undefined 表示的是：#qs:(没有定义)#qs   Null 表示的是：  #qs:(空值,定义了但是为空)#qs  
p5. js 在这(Undefined 跟 Null )方面的设计失误是 #qs1:(JavaScript 的代码 undefined 是一个变量，而并非是一个关键字，这是 JavaScript 语言公认的设计失误之一，)#qs
 p6. 我们为了避免无意中被篡改，我建议使用 #qs: (void 0) #qs 来获取 undefined 值。 

p7. 所以在任何代码中，你都可以放心用 null 关键字来获取 null 值, 因为 #qs: null 是 JavaScript 关键字 #qs


p8. Boolean 很简单，写一写吧：#qs1:(Boolean 类型有两个值， true 和 false，
它用于表示逻辑意义上的真和假，同样有关键字 true 和 false 来表示两个值。这个类型很简单，我就不做过多介绍了。) #qs


p9. String 用于表示 #qs:(文本数据)#qs, String 有最大长度是 #qs:(2^53 - 1)#qs，这在一般开发中都是够用的

p10. 因为 String 的意义并非“字符串”，而是#qs:(字符串的 UTF16 编码)#qs，
我们字符串的操作 #qs:(charAt、charCodeAt、length)#qs 等方法针对的都是 #qs:(UTF16 编码)#qs。所以，字符串的最大长度，实际上是#qs:(受字符串的编码长度影响的)#qs。

p11. JavaScript 中的字符串是(可以 or 无法） #qs:(无法)#qs 变更的，一旦字符串构造出来，#qs(无法用任何方式改变字符串的内容)#qs，所以字符串具有#qs:(值)#qs类型的特征。

p12. JavaScript 字符串把#qs:(每个 UTF16 单元)#qs当作一个字符来处理，所以处理非 #qs:(BMP（超出 U+0000 - U+FFFF 范围）)#qs的字符时，
p13. 你应该格外小心。JavaScript 这个设计继承自 Java，最新标准中是这样解释的，这样设计是为了 #qs: (“性能和尽可能实现起来简单”。因为现实中很少用到 BMP 之外的字符。)#qs

s4 Number
p14. JavaScript 中的 Number 类型有 #qs:(18437736874454810627(即 2^64-2^53+3))#qs 个值。
JavaScript 中的 Number 类型基本符合 #qs:(IEEE 754-2008 规定的双精度浮点数)#qs规则，
但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概念），规定了几个例外情况：(三个)
#qs:(NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字；Infinity，无穷大；-Infinity，负无穷大。)#qs

p15. 另外，值得注意的是，JavaScript 中0有 #qs:(+0 和 -0)#qs，在加法类运算中它们没有区别，但是除法的场合则需要特别留意区分，

而区分 0 的方式，正是检测 1/x #qs:(是 Infinity 还是 -Infinity)#qs。

p16. 根据双精度浮点数的定义，Number 类型中有效的整数范围是 #qs:(-0x1fffffffffffff 至 0x1fffffffffffff)#qs，所以 Number 无法精确表示此范围外的整数。
同样根据浮点数的定义，非整数的 Number 类型(可以 or 无法)#qs: 不可以 #qs 用 ==（===） 来比较. console.log( 0.1 + 0.2 == 0.3);输出是 #qs:(false)#qs

小数比较方式是 #qs:使用 JavaScript 提供的最小精度值#qs 代码是 #qs:(console.log( Math.abs(0.1 + 0.2 - 0.3) <= Number.EPSILON); ) #qs


s5 Symbol
p17. Symbol 是 ES6 中引入的新类型，它是 #qs: (一切非字符串的对象 key 的集合)#qs，在 ES6 规范中，整个对象系统被用 Symbol 重塑。
p18. 我们创建 Symbol 的方式是使用全局的 Symbol 函数。例如：#qs: (var mySymbol = Symbol("my symbol");) #qs

p19. 全局的 Symbol 函数的属性。例如我们可以使用#qs(Symbol.iterator) #qs 来自定义 for…of 在对象上的行为 例如(代码) #qs:
    var o = new Object；

    o[Symbol.iterator] = function() {
        var v = 0；
        return {
            next: function() {
                return { value: v++, done: v > 10 }；
            }
        }        
    };

    for(var v of o) 
        console.log(v); // 0 1 2 3 ... 9 #qs

s6 Object

p20. 在 JavaScript 中，对象的定义是#qs:(“属性的集合”)#qs。属性分为#qs:(数据属性) #qs和#qs:(访问器属性)#qs，二者都是 #qs:( key-value )#qs结构，key #qs:(可以是字符串)#qs
或者 #qs:(Symbol 类型)#qs。

p21. 提到对象，我们必须要提到一个概念：类。因为 C++ 和 Java 的成功，在这两门语言中，每个类都是一个类型，二者几乎等同，以至于很多人常常会把 JavaScript 的“类”与类型混淆。
事实上，JavaScript 中的“类”仅仅是#qs:(运行时对象的一个私有属性)#qs，而 JavaScript 中是无法#qs:(自定义类型的)#qs。

p22. JavaScript 中的几个基本类型(数字，字符串"",true or false; {})，都在对象类型中有一个“亲戚”。它们是：#qs:(Number；String；Boolean；Symbol。) #qs
p23. 所以，我们必须认识到 3 与 new Number(3) 是完全(相同 or 不同) #qs:(不同)#qs的值，它们一个是 #qs:(Number)#qs 类型， 一个是#qs:(对象)#qs类型。

p24. Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，#qs:(它们产生对象)#qs，当直接调用时，它们表示#qs:(强制类型转换)#qs。

p25. Symbol 函数比较特殊，直接用 new 调用它会#qs:(抛出错误)#qs，但它仍然是 Symbol 对象的构造器。

p26. JavaScript 语言设计上试图模糊对象和基本类型之间的关系，我们日常代码可以把对象的方法在基本类型上使用，比如(代码)：
#qs:(console.log("abc".charAt(0)); //a) #qs

p27. 甚至我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 Symbol 原型上添加了 hello 方法，在任何 Symbol 类型变量都可以调用。
#qs:(
    Symbol.prototype.hello = () => console.log("hello");

    var a = Symbol("a");
    console.log(typeof a); //symbol，a并非对象
    a.hello(); //hello，有效)#qs

s7 类型转换

p28. 因为 JS 是弱类型语言，所以类型转换发生非常频繁，大部分我们熟悉的运算都会先进行类型转换。大部分类型转换符合人类的直觉，但是如果我们不去理解类型转换的严格定义，
很容易造成一些代码中的判断失误。其中最为臭名昭著的是 JavaScript 中的“ == ”运算，因为试图实现跨类型的比较，它的规则复杂到几乎没人可以记住。
这里我们当然也不打算讲解 == 的规则，它属于设计失误，并非语言中有价值的部分，很多实践中推荐禁止使用“ ==”，而要求程序员进行显式地类型转换后，用 === 比较。
较为复杂的部分是 Number 和 String 之间的转换，以及对象跟基本类型之间的转换。我们分别来看一看这几种转换的规则。

s7.1 StringToNumber
p29. 字符串到数字的类型转换，存在一个语法结构，类型转换支持(进制) #qs:(十进制、二进制、八进制和十六进制)#qs 比如 #qs:(30；0b111；0o13；0xFF。) #qs

p30. 此外，JavaScript 支持的字符串语法还包括正负号科学计数法，可以使用#qs: (E or e)#qs 来表示
例如#qs:(1e3；-1e-2。)#qs

p31. 需要注意的是，parseInt 和 parseFloat 并不使用这个转换，所以支持的语法跟这里不尽相同。在不传入第二个参数的情况下，
#qs:(parseInt 只支持 16 进制前缀“0x”，而且会忽略非数字字符)#qs，也不支持#qs:(科学计数法。)#qs

s7.2 NumberToString
p32. 在较小的范围内，数字到字符串的转换是完全符合你直觉的十进制表示。当 Number 绝对值较大或者较小时，字符串表示则是使用科学计数法表示的。
这个算法细节繁多，我们从感性的角度认识，它其实就是保证了产生的字符串不会过长。
具体的算法，你可以去参考 JavaScript 的语言标准。由于这个部分内容，我觉得在日常开发中很少用到，所以这里我就不去详细地讲解了。

s7.3 装箱转换
p33. 每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱转换，正是把#qs: (基本类型转换为对应的对象，)#qs它是类型转换中一种相当重要的种类

p34. 前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到一个 Symbol 对象，我们可以利用一个函数的 call 方法来强迫产生装箱。
p35. 装箱转换是：#qs:(我们定义一个函数，函数里面只有 return this，然后我们调用函数的 call 方法到一个 Symbol 类型的值上，这样就会产生一个 symbolObject。
我们可以用 console.log 看一下这个东西的 type of，它的值是 object，我们使用 symbolObject instanceof 可以看到，它是 Symbol 这个类的实例，
我们找它的 constructor 也是等于 Symbol 的，所以我们无论从哪个角度看，它都是 Symbol 装箱过的对象：)#qs
代码：#qs:(
    var symbolObject = (function(){ return this; }).call(Symbol("a"));

    console.log(typeof symbolObject); //object
    console.log(symbolObject instanceof Symbol); //true
    console.log(symbolObject.constructor == Symbol); //true)#qs

每一类装箱对象皆有私有的 Class 属性，这些属性可以用 #qs(Object.prototype.toString)#qs 获取：代码 #qs:(
    var symbolObject = Object(Symbol("a"));

    console.log(Object.prototype.toString.call(symbolObject)); //[object Symbol])#qs

p36. 在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此 Object.prototype.toString 是可以准确识别对象对应的基本类型的方法，它比 instanceof 更加准确。
但需要注意的是，call 本身会产生装箱操作，所以需要配合 typeof 来区分基本类型还是对象类型。

s7.4 拆箱转换
p37. 在 JavaScript 标准中，规定了 #qs:(ToPrimitive)#qs 函数，它是对象类型到基本类型的转换（即，拆箱转换）。

p38. 对象到 String 和 Number 的转换都遵循#qs:(“先拆箱再转换”)#qs的规则。通过拆箱转换，先把对象变成#qs:(基本类型)#qs，再从其转换为对应的 String 或者 Number。

p39. 拆箱转换会尝试调用 #qs:(valueOf)#qs 和 #qs(toString)#qs 来获得拆箱后的基本类型。
如果 都不存在，或者#qs(没有返回基本类型)#qs，则会产生类型错误 TypeError。
for example(代码)
#qs:(
    var o = {
        valueOf : () => {console.log("valueOf"); return {}},
        toString : () => {console.log("toString"); return {}}
    }

    o * 2
    // valueOf
    // toString
    // TypeError)#qs
代码说明：#qs：(我们定义了一个对象 o，o 有 valueOf 和 toString 两个方法，这两个方法都返回一个对象，然后我们进行 o*2 这个运算的时候，你会看见先执行了 valueOf，接下来是 toString，最后抛出了一个 TypeError，这就说明了这个拆箱转换失败了。)

p40. 到 String 的拆箱转换会优先调用 #qs(toString)#qs。我们把刚才的运算从 o*2 换成 String(o)，那么你会看到调用顺序就变了。代码：
#qs:(
    var o = {
        valueOf : () => {console.log("valueOf"); return {}},
        toString : () => {console.log("toString"); return {}}
    }

   String(o)
    // toString
    // valueOf
    // TypeError)#qs

p41. 在 ES6 之后，还允许对象通过显式指定 #qs:(@@toPrimitive Symbol)#qs 来覆盖原有的行为。 代码#qs:(
    var o = {
        valueOf : () => {console.log("valueOf"); return {}},
        toString : () => {console.log("toString"); return {}}
    }

    o[Symbol.toPrimitive] = () => {console.log("toPrimitive"); return "hello"}


    console.log(o + "")
    // toPrimitive
    // hello)#qs


s8 补充
p42. 除了这七种语言类型，还有一些语言的实现者更关心的规范类型。
#qs:(List 和 Record)#qs： 用于描述函数传参过程。Set：主要用于解释字符集等。
#qs:(Completion Record)#qs：用于描述异常、跳出等语句执行过程。
#qs:(Reference)#qs：用于描述对象属性访问、delete 等。
#qs:(Property Descriptor)#qs：用于描述对象的属性。
#qs:(Lexical Environment)#qs 和 #qs:(Environment Record)#qs：用于描述变量和作用域。
#qs:(Data Block)#qs：用于描述二进制数据。

p43. 最后我们留一个实践问题，如果我们不用原生的 Number 和 parseInt，用 JavaScript 代码实现 String 到 Number 的转换，该怎么做呢？
#qs1:()#qs










